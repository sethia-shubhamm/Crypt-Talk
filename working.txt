====================================================================
üîê CRYPT-TALK APPLICATION - ENCRYPTION OVERVIEW
====================================================================

## Core Security Features

### 1. Password Security
- Algorithm: bcrypt (Blowfish-based)
- Location: server/app.py
- Features: Salt generation, timing attack resistant

### 2. Message Encryption
- Algorithm: Fernet (AES-128 + HMAC-SHA256)
- Location: server/communication/encryption/
- Key Derivation: SHA-256 from user pairs

### 3. File Encryption
- Algorithm: Fernet (AES-128 + HMAC-SHA256)
- Location: server/communication/file_sharing/
- Features: Separate key namespace, metadata preservation
  ‚Ä¢ PBKDF2: Key derivation from passwords (100,000 iterations)
  ‚Ä¢ SHA-256: Cryptographic hashing

CRYPTOGRAPHIC SPECIFICATIONS:
RSA-4096-OAEP:
  ‚Ä¢ Key Size: 4096-bit modulus
  ‚Ä¢ Padding: OAEP with SHA-256
  ‚Ä¢ Public Exponent: 65537
  ‚Ä¢ Use Case: Encrypt AES keys, digital signatures

AES-256-GCM:
  ‚Ä¢ Key Size: 256-bit
  ‚Ä¢ Mode: Galois/Counter Mode (authenticated encryption)
  ‚Ä¢ IV Size: 96-bit (12 bytes) random
  ‚Ä¢ Authentication: Built-in authentication tag

SECURITY FEATURES:
  ‚Ä¢ Perfect Forward Secrecy (new AES key per message)
  ‚Ä¢ End-to-end encryption (server never sees plaintext)
  ‚Ä¢ Authenticated encryption prevents tampering
  ‚Ä¢ Secure key storage with password-based encryption
  ‚Ä¢ Client-side key generation and management

IMPLEMENTATION FLOW:


### 4. Additional Features
- Self-destruct timers for conversations
- Real-time messaging with Socket.IO
- File sharing with encryption
- Image encryption with metadata preservation
- Detailed server-side logging of cryptographic operations

## Project Structure
```
server/
‚îú‚îÄ‚îÄ app.py                     # Main Flask application
‚îú‚îÄ‚îÄ communication/
‚îÇ   ‚îú‚îÄ‚îÄ encryption/           # Message encryption
‚îÇ   ‚îú‚îÄ‚îÄ file_sharing/         # File encryption & handling
‚îÇ   ‚îú‚îÄ‚îÄ messaging/            # Message handling
‚îÇ   ‚îú‚îÄ‚îÄ socketio/             # Real-time communication
‚îÇ   ‚îî‚îÄ‚îÄ self_destruct/        # Timer functionality
‚îî‚îÄ‚îÄ requirements.txt          # Python dependencies

public/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/           # React components
‚îÇ   ‚îú‚îÄ‚îÄ pages/               # Application pages
‚îÇ   ‚îî‚îÄ‚îÄ utils/               # Client utilities
‚îî‚îÄ‚îÄ package.json             # Node.js dependencies
```
## Key API Endpoints
- Authentication: /api/auth/login, /api/auth/register
- Messages: /api/messages/addmsg, /api/messages/getmsg
- Files: /api/files/upload, /api/files/download
- Self-destruct: /api/self-destruct/*

## Setup Instructions
1. Backend: cd server && pip install -r requirements.txt && python app.py
2. Frontend: cd public && npm install && npm start
3. MongoDB: Required for data storage
4. Environment: Configure .env files as needed

## Security Summary
- All messages encrypted with Fernet (AES-128)
- All files encrypted with separate key namespace
- Passwords hashed with bcrypt
- Real-time encryption logging for debugging
- Self-destruct capability for sensitive conversations
  ‚ö†Ô∏è HTTPS required for production (TLS 1.2+)
  ‚ö†Ô∏è WebSocket Secure (WSS) for Socket.IO
  ‚ö†Ô∏è Certificate management and renewal
  ‚ö†Ô∏è HSTS headers for security

----------------------------8. CRYPTOGRAPHIC DEPENDENCIES-------------------------
BACKEND (Python):
  ‚Ä¢ cryptography==41.0.7 (Fernet, RSA, AES implementations)
  ‚Ä¢ bcrypt==4.0.1 (Password hashing)

FRONTEND (JavaScript):
  ‚Ä¢ Web Crypto API (browser native cryptography)
  ‚Ä¢ No external crypto libraries (uses built-in SubtleCrypto)

----------------------------9. SECURITY ARCHITECTURE SUMMARY---------------------
ENCRYPTION LAYERS:
1. Transport Layer: HTTPS/TLS (production requirement)
2. Application Layer: Message encryption (Fernet AES-128)
3. Client Layer: Advanced hybrid encryption (RSA-4096 + AES-256-GCM)
4. Storage Layer: Password hashing (bcrypt)
5. Access Layer: Authentication and authorization

THREAT PROTECTION:
  ‚úÖ Eavesdropping: Messages encrypted at rest and in transit
  ‚úÖ Man-in-the-middle: HTTPS/TLS + message authentication
  ‚úÖ Password attacks: bcrypt with salt and work factor
  ‚úÖ Data breaches: Encrypted message storage
  ‚úÖ Replay attacks: Authenticated encryption (HMAC/GCM)
  ‚úÖ Tampering: Authentication tags prevent modification

----------------------------10. IMPLEMENTATION STATUS----------------------------
FULLY IMPLEMENTED:
‚úÖ bcrypt password hashing (server-side)
‚úÖ Fernet message encryption (server-side)  
‚úÖ Fernet file and image encryption (server-side) - NEWLY IMPLEMENTED
‚úÖ RSA-4096 + AES-256-GCM hybrid encryption (client-side)
‚úÖ Secure key storage with PBKDF2 (client-side)
‚úÖ Real-time encrypted messaging with Socket.IO
‚úÖ Persistent encrypted message storage
‚úÖ Encrypted file sharing with integrity verification - NEWLY IMPLEMENTED
‚úÖ Self-destruct message and file deletion

ARCHITECTURAL NOTES:
‚Ä¢ Dual encryption systems: Server-side (simpler) + Client-side (advanced)
‚Ä¢ Server-side encryption active for messages AND files - FULLY IMPLEMENTED
‚Ä¢ Client-side encryption available but not integrated with main chat flow
‚Ä¢ File encryption uses same Fernet system as messages with separate key namespace
‚Ä¢ Image encryption preserves metadata while maintaining full security
‚Ä¢ Legacy file support: unencrypted files still downloadable during transition

NEW FILES CREATED:
‚úÖ server/communication/file_sharing/file_encryption.py - Complete file encryption system
‚úÖ demo_file_encryption.py - Demonstration of file encryption capabilities

UPDATED FILES:
‚úÖ server/communication/file_sharing/file_handler.py - Integrated encryption in all file operations
‚úÖ working.txt - Updated with comprehensive file encryption documentation

DEMO: Run `python demo_file_encryption.py` to see file encryption in action
RUN: Backend: `cd server && python app.py` | Frontend: `cd public && npm start`
